#!/usr/bin/python3
# PYTHON_ARGCOMPLETE_OK
# -*- coding: utf-8 -*-

import os
import sys
import json
import logging
import argparse
import urllib.parse

from typing import Optional,Dict,Union,IO

import httplib2 #type: ignore

try:
    import argcomplete #type: ignore
except ImportError:
    argcomplete = None

##########

def get_token_gmail(client_id:str,
                    client_secret:str,
                    scope:str,
                    outputfile:str) -> None:
    raise NotImplementedError()

##########

OUTLOOK_REDIRECT_URI = "https://login.microsoftonline.com/common/oauth2/nativeclient"
OUTLOOK_SCOPE = "openid offline_access https://outlook.office.com/SMTP.Send"


def outlook_get_authorization_code(client_id:str, tenant:str) -> str:
    url = f"https://login.microsoftonline.com/{tenant}/oauth2/v2.0/authorize"
    query:Dict[str,str] = {}
    query['client_id'] = client_id
    query['response_type'] = 'code'
    query['redirect_uri'] = OUTLOOK_REDIRECT_URI
    query['response_mode'] = 'query'
    query['scope'] = OUTLOOK_SCOPE

    print("Please visit the following link in a web browser, then paste the resulting URL:\n\n" +
          f"{url}?{urllib.parse.urlencode(query)}\n",
          file=sys.stderr)

    resulting_url_input:str = input("Resulting URL: ")
    if OUTLOOK_REDIRECT_URI not in resulting_url_input:
        raise Exception(f"Resulting URL does not contain expected prefix: {OUTLOOK_REDIRECT_URI}")
    resulting_url = urllib.parse.urlparse(resulting_url_input)
    code = urllib.parse.parse_qs(resulting_url.query)
    if "code" not in code:
        raise Exception(f"Missing code in result: {resulting_url.query}")
    return code["code"][0]


def outlook_get_initial_tokens(client_id:str, tenant:str, code:str) -> Dict[str,Union[str,int]]:
    url = f"https://login.microsoftonline.com/{tenant}/oauth2/v2.0/token"
    token_request:Dict[str,str] = {}
    token_request['client_id'] = client_id
    token_request['scope'] = OUTLOOK_SCOPE
    token_request['code'] = code
    token_request['redirect_uri'] = OUTLOOK_REDIRECT_URI
    token_request['grant_type'] = 'authorization_code'

    resp, content = httplib2.Http().request(
        uri=url,
        method="POST",
        headers={"Content-Type": "application/x-www-form-urlencoded"},
        body=urllib.parse.urlencode(token_request))
    content = content.decode("utf-8")
    if resp.status != 200:
        raise Exception(f"Request failed: {content}")
    try:
        content = json.loads(content)
        return {
            'access_token': content["access_token"],
            'refresh_token': content["refresh_token"],
            'expiry': 0,
        }
    except:
        raise Exception(f"Tokens not found in response: {content}")


def get_token_outlook(client_id:str, tenant:str, output_file:IO[str]) -> None:
    code = outlook_get_authorization_code(client_id, tenant)
    tokens = outlook_get_initial_tokens(client_id, tenant, code)
    json.dump(tokens, output_file, indent=4)

##########


parser = argparse.ArgumentParser()
subparse = parser.add_subparsers(
    #title="subcommands",
    required=True,
)


def subcommand_get_token(args:argparse.Namespace) -> None:
    if args.service == 'outlook':
        if not args.tenant:
            parser.error("'outlook' service requires 'tenant' argument.")
        get_token_outlook(
            args.client_id,
            args.tenant,
            args.output_file,
        )
    elif args.service == 'gmail':
        if not args.client_secret:
            parser.error("'gmail' service requires 'client-secret' argument.")
        if not args.scope:
            parser.error("'gmail' service requires 'scope' argument.")
        get_token_gmail(
            args.client_id,
            args.client_secret,
            args.scope,
            args.output_file,
        )


sp_get_token = subparse.add_parser('get-token')
sp_get_token.set_defaults(func=subcommand_get_token)
sp_get_token.add_argument(
    'service', choices=['outlook', 'gmail'],
    help="service type",
)
sp_get_token.add_argument(
    '--client-id', required=True,
    help="required for both services",
)
sp_get_token.add_argument(
    '--tenant', default='consumers',
    help="wanted by 'outlook' (defaults to 'consumers')",
)
sp_get_token.add_argument(
    '--client-secret',
    help="required for 'gmail'",
)
sp_get_token.add_argument(
    '--scope',
    help="required for 'gmail'",
)
sp_get_token.add_argument(
    'output_file', nargs='?', type=argparse.FileType('w'), default='-',
    help="output file, '-' for stdout",
)


def subcommand_test(args:argparse.Namespace) -> None:
    raise NotImplementedError()


sp_test = subparse.add_parser('test')
sp_test.set_defaults(func=subcommand_test)

##########


def main() -> None:
    if argcomplete:
        argcomplete.autocomplete(parser)
    elif '_ARGCOMPLETE' in os.environ:
        logging.error('Argument completion requested but the "argcomplete" '
                      'module is not installed. '
                      'Maybe you want to "apt install python3-argcomplete"')
        sys.exit(1)
    args = parser.parse_args()
    args.func(args)


if __name__ == '__main__':
    main()
